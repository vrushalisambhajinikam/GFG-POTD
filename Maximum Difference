//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    /*You are required to complete this method */
    int findMaxDiff(vector<int> &arr) {
        int n = arr.size();
        vector<int> ls(n, 0); // Nearest smaller element to the left
        vector<int> rs(n, 0); // Nearest smaller element to the right
        stack<int> s; // Stack to keep track of indices for comparison

        // Find nearest smaller elements on the left
        for (int i = 0; i < n; ++i) {
            // Pop elements from stack that are not smaller than arr[i]
            while (!s.empty() && arr[s.top()] >= arr[i]) {
                s.pop();
            }
            // If stack is not empty, assign the nearest smaller element on the left
            if (!s.empty()) {
                ls[i] = arr[s.top()];
            } else {
                ls[i] = 0; // No smaller element on the left
            }
            // Push the current index onto the stack
            s.push(i);
        }

        // Clear the stack for finding right smaller elements
        while (!s.empty()) {
            s.pop();
        }

        // Find nearest smaller elements on the right
        for (int i = n - 1; i >= 0; --i) {
            // Pop elements from stack that are not smaller than arr[i]
            while (!s.empty() && arr[s.top()] >= arr[i]) {
                s.pop();
            }
            // If stack is not empty, assign the nearest smaller element on the right
            if (!s.empty()) {
                rs[i] = arr[s.top()];
            } else {
                rs[i] = 0; // No smaller element on the right
            }
            // Push the current index onto the stack
            s.push(i);
        }

        // Calculate the maximum absolute difference
        int maxDiff = 0;
        for (int i = 0; i < n; ++i) {
            maxDiff = max(maxDiff, abs(ls[i] - rs[i]));
        }

        return maxDiff;
    }
};



//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    cin.ignore();

    while (t--) {
        string input;
        int num;
        vector<int> arr;

        getline(cin, input);
        stringstream s2(input);
        while (s2 >> num) {
            arr.push_back(num);
        }

        Solution ob;
        cout << ob.findMaxDiff(arr) << endl;
    }
    return 0;
}

// } Driver Code Ends
