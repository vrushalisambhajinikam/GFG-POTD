//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    // Helper function to perform DFS
    void dfs(int node, vector<vector<int>> &graph, vector<bool> &visited) {
        visited[node] = true;
        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                dfs(neighbor, graph, visited);
            }
        }
    }

    int isCircle(vector<string> &arr) {
        // Step 1: Create graphs and degree count arrays
        vector<vector<int>> graph(26);        // Forward graph
        vector<vector<int>> reverseGraph(26); // Reverse graph
        vector<int> in_degree(26, 0);         // In-degree for each character
        vector<int> out_degree(26, 0);        // Out-degree for each character
        vector<bool> is_present(26, false);   // To track which characters are present

        // Step 2: Build the graph based on the strings
        for (string &word : arr) {
            int first_char = word[0] - 'a';  // First character of the word
            int last_char = word.back() - 'a'; // Last character of the word
            graph[first_char].push_back(last_char);  // Forward edge
            reverseGraph[last_char].push_back(first_char); // Reverse edge
            out_degree[first_char]++;  // Increment out-degree of first character
            in_degree[last_char]++;    // Increment in-degree of last character
            is_present[first_char] = true;
            is_present[last_char] = true;
        }

        // Step 3: Check if in-degree equals out-degree for all characters
        for (int i = 0; i < 26; i++) {
            if (in_degree[i] != out_degree[i]) {
                return 0;  // If any character has unequal in and out degrees
            }
        }

        // Step 4: Perform DFS to check if the graph is strongly connected
        // Find the first character that is present in the array
        int start = -1;
        for (int i = 0; i < 26; i++) {
            if (out_degree[i] > 0) {
                start = i;
                break;
            }
        }

        // If no valid start point is found, return 0 (edge case)
        if (start == -1) return 0;

        // Perform DFS on the forward graph
        vector<bool> visited(26, false);
        dfs(start, graph, visited);
        
        // Check if all characters with non-zero out-degree are visited
        for (int i = 0; i < 26; i++) {
            if (out_degree[i] > 0 && !visited[i]) {
                return 0;
            }
        }

        // Perform DFS on the reverse graph
        fill(visited.begin(), visited.end(), false);
        dfs(start, reverseGraph, visited);
        
        // Check if all characters with non-zero in-degree are visited
        for (int i = 0; i < 26; i++) {
            if (in_degree[i] > 0 && !visited[i]) {
                return 0;
            }
        }

        // If all checks pass, return 1 (strings can form a circle)
        return 1;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        vector<string> A;
        string s;

        for (int i = 0; i < N; i++) {
            cin >> s;
            A.push_back(s);
        }

        Solution ob;
        cout << ob.isCircle(A) << endl;
    }
    return 0;
}
// } Driver Code Ends
