//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to return max value that can be put in knapsack of capacity W.
    
    int help(int n,int w,vector<int>&wt,vector<int>&val,int index,vector<vector<int>>&dp){
        if(index==n){
            return 0;
        }
        if(dp[index][w]!=-1)return dp[index][w];
        int nonpick=0,pick=0;
        nonpick=help(n,w,wt,val,index+1,dp);
        if(w>=wt[index]){
            pick=val[index]+help(n,w-wt[index],wt,val,index+1,dp);
        }
        return dp[index][w]= max(nonpick,pick);
    }
    int knapSack(int W, vector<int>& wt, vector<int>& val) {
        // Your code here
        
        int n=wt.size();
        vector<vector<int>>dp(n,vector<int>(W+1,-1));
        return help(n,W,wt,val,0,dp);
    }
};

//{ Driver Code Starts.

int main() {
    // taking total testcases
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        // reading number of elements and weight
        int n, w;
        vector<int> arr, val, wt, drr;
        string ip;
        int number;
        getline(cin, ip);
        stringstream ss(ip);

        while (ss >> number) {
            arr.push_back(number);
        }

        getline(cin, ip);
        ss.clear();
        ss.str(ip);

        while (ss >> number) {
            val.push_back(number);
        }

        w = arr[0];
        n = val.size();
        getline(cin, ip);
        ss.clear();
        ss.str(ip);

        while (ss >> number) {
            wt.push_back(number);
        }
        Solution ob;
        cout << ob.knapSack(w, wt, val) << endl;
    }
    return 0;
}
// } Driver Code Ends
