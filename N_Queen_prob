//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while (t-- > 0) {
            int n = Integer.parseInt(in.readLine());N

            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);
            if (ans.size() == 0)
                System.out.println("-1");
            else {
                for (int i = 0; i < ans.size(); i++) {
                    System.out.print("[");
                    for (int j = 0; j < ans.get(i).size(); j++)
                        System.out.print(ans.get(i).get(j) + " ");
                    System.out.print("] ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        int[] board = new int[n];  // board[i] will hold the column position of the queen in row i
        solveNQueens(result, board, n, 0);
        return result;
    }
    
    private void solveNQueens(ArrayList<ArrayList<Integer>> result, int[] board, int n, int row) {
        if (row == n) {
            result.add(generateSolution(board));
            return;
        }
        
        for (int col = 0; col < n; col++) {
            if (isSafe(board, row, col)) {
                board[row] = col;  // Place the queen
                solveNQueens(result, board, n, row + 1);  // Move to the next row
                board[row] = -1;  // Backtrack: Remove the queen
            }
        }
    }
    
    private boolean isSafe(int[] board, int row, int col) {
        for (int i = 0; i < row; i++) {
            int placedCol = board[i];
            if (placedCol == col || Math.abs(placedCol - col) == Math.abs(i - row)) {
                return false;  // Same column or diagonal
            }
        }
        return true;
    }
    
    private ArrayList<Integer> generateSolution(int[] board) {
        ArrayList<Integer> solution = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            solution.add(board[i] + 1);  // Convert 0-based index to 1-based
        }
        return solution;
    }
}
