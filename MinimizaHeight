//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function template for C++

class Solution {
  public:
    int getMinDiff(vector<int> &arr, int k) {
        int n = arr.size();
        if (n == 1)
            return 0;

        // Sort the array to make it easier to manage min and max values.
        sort(arr.begin(), arr.end());

        // Initialize result as the difference between the maximum and minimum elements before any changes.
        int result = arr[n - 1] - arr[0];

        // Loop through the array and adjust heights to minimize the difference.
        int min_height, max_height;
        for (int i = 1; i < n; i++) {
            if (arr[i] >= k) {
                // Calculate the new possible min and max heights
                min_height = min(arr[0] + k, arr[i] - k);
                max_height = max(arr[i - 1] + k, arr[n - 1] - k);

                // Update the result with the minimum possible difference
                result = min(result, max_height - min_height);
            }
        }

        return result;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        int n, k;
        cin >> k;
        cin.ignore();
        vector<int> a;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int num;
        while (ss >> num)
            a.push_back(num);

        Solution ob;
        auto ans = ob.getMinDiff(a, k);
        cout << ans << "\n";
    }
    return 0;
}
// } Driver Code Ends
