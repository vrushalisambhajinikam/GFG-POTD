//{ Driver Code Starts
// Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);

        int t = Integer.parseInt(in.readLine().trim());
        while (t-- > 0) {
            String line = in.readLine();
            String[] tokens = line.split(" ");

            // Create an ArrayList to store the integers
            ArrayList<Integer> array = new ArrayList<>();

            // Parse the tokens into integers and add to the array
            for (String token : tokens) {
          ‚Ä¶
[8:03 pm, 20/8/2024] Ruti Pathankarüòáüòç: //{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends
//User function Template for C++

/*
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
 Node* createMapping(Node* root, int target, unordered_map<Node*, Node*>& nodeToParent) {
    Node* targetNode = NULL;
    queue<Node*> q;
    q.push(root);
    nodeToParent[root] = NULL;

    while (!q.empty()) {
        Node* current = q.front();
        q.pop();

        if (current->data == target)
            targetNode = current;

        if (current->left) {
            nodeToParent[current->left] = current;
            q.push(current->left);
        }
        if (current->right) {
            nodeToParent[current->right] = current;
            q.push(current->right);
        }
    }
    return targetNode;
}
int burnTree(Node* root, Node* targetNode, unordered_map<Node*, Node*>& nodeToParent) {
    unordered_map<Node*, bool> visited;
    queue<Node*> q;
    q.push(targetNode);
    visited[targetNode] = true;

    int time = 0;

    while (!q.empty()) {
        int size = q.size();
        bool flag = false;

        for (int i = 0; i < size; ++i) {
            Node* current = q.front();
            q.pop();

            if (current->left && !visited[current->left]) {
                q.push(current->left);
                visited[current->left] = true;
                flag = true;
            }
            if (current->right && !visited[current->right]) {
                q.push(current->right);
                visited[current->right] = true;
                flag = true;
            }
            if (nodeToParent[current] && !visited[nodeToParent[current]]) {
                q.push(nodeToParent[current]);
                visited[nodeToParent[current]] = true;
                flag = true;
            }
        }
        if (flag) time++;
    }

    return time;
}

  
    int minTime(Node* root, int target) 
    {
       unordered_map<Node*, Node*> nodeToParent;
    Node* targetNode = createMapping(root, target, nodeToParent);
    return burnTree(root, targetNode, nodeToParent);
        // Your code goes here
    }
};

//{ Driver Code Starts.

int main() 
{
    int tc;
    scanf("%d ", &tc);
    while (tc--) 
    {    
        string treeString;
        getline(cin, treeString);
        // cout<<treeString<<"\n";
        int target;
        cin>>target;
        // cout<<target<<"\n";

        Node *root = buildTree(treeString);
        Solution obj;
        cout<<obj.minTime(root, target)<<"\n"; 

        cin.ignore();

    }


    return 0;
}

// } Driver Code Ends
